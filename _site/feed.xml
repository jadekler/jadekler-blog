<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-01-29T15:46:48-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Jean Barkhuysen</title><subtitle>SWE at Netflix working on distributed media processing/storage. Former Googler working on distributed storage. Former surname de Klerk.
This is my personal website. The views represented here are my own, and do not represent my employer.</subtitle><entry><title type="html">Running your own pkgsite</title><link href="http://localhost:4000/2025/01/29/pkgsite.html" rel="alternate" type="text/html" title="Running your own pkgsite" /><published>2025-01-29T00:55:23-07:00</published><updated>2025-01-29T00:55:23-07:00</updated><id>http://localhost:4000/2025/01/29/pkgsite</id><content type="html" xml:base="http://localhost:4000/2025/01/29/pkgsite.html"><![CDATA[<h2 id="who-this-is-for">Who this is for</h2>

<p>I’ve recently joined Netflix, and I’m doing a bit of Go. Go is not one of the
main languages at Netflix, so it lacks a dedicated team supporting it, and lacks
some common tooling.</p>

<p>Netflix has a private enterprise GitHub (and goproxy), which means that
<a href="https://pkg.go.dev/golang.org/x/pkgsite">pkgsite</a> does not crawl it. I set out
to run pkgsite myself against this private enterprise GitHub. This article is
for anyone else setting out to do similarly.</p>

<h2 id="understanding-pkgsite">Understanding pkgsite</h2>

<p><a href="https://github.com/golang/pkgsite/blob/master/doc/design.md">github.com/golang/pkgsite/blob/master/doc/design.md</a>
describes pkgsite’s components.
<a href="https://sum.golang.org/">sum.golang.org</a> describes the proxy and index that
enables pkgsite.</p>

<h3 id="code-layout">Code layout</h3>

<p>pkgsite is canonically hosted at <a href="https://go.googlesource.com/pkgsite">go.googlesource.com/pkgsite</a>
and can be cloned with <code class="language-plaintext highlighter-rouge">git clone https://go.googlesource.com/pkgsite</code>. The
important parts for this article are,</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>tree
<span class="nb">.</span>
|____cmd
| |____frontend
| | |____main.go
| |____pkgsite
| | |____main.go
| |____worker
| | |____main.go
|____migrations
| |____000073_create_documentation_symbols.down.sql
| |____000018_add_module_version_states_status_index.up.sql
| |____...etc...
|____devtools
| |____cmd
| | |____seeddb
| | | |____seed.txt
| | | |____main.go
</code></pre></div></div>

<p>Let’s quickly describe each:</p>

<ul>
  <li><strong>cmd/pkgsite</strong>: The simplest and best documented. Running this lets you host
a minimal pkgsite. It’s not connected to a database and doesn’t have a worker
searching for modules. So, it doesn’t have a usable search feature. It’s useful
for looking at one or two of your own projects but without search, it’s not good
enough for an entire org.</li>
  <li><strong>frontend</strong>: The web-serving frontend. When run, serves the frontend at
<code class="language-plaintext highlighter-rouge">localhost:8080</code>.</li>
  <li><strong>worker</strong>: The data-fetching backend that updates the database. When run,
serves a work management page at <code class="language-plaintext highlighter-rouge">localhost:8000</code>.</li>
  <li><strong>migrations</strong>: A series of sql scripts that when run in order will set up
all the necessary tables and schemas.</li>
  <li><strong>seeddb</strong>: A one-shot program that reads a <code class="language-plaintext highlighter-rouge">seed.txt</code> file, fetches modules
listed there-in, and populates the database with the information.</li>
</ul>

<h3 id="modifiable-config">Modifiable config</h3>

<p>The frontend and worker both use <code class="language-plaintext highlighter-rouge">internal/config/serverconfig/config.go</code>, which
is modifiable with environment variables. Here’s a few you may care about:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Proxy config.
ProxyURL:   GetEnv("GO_MODULE_PROXY_URL", "https://proxy.golang.org"),

# Database config.
DBHost:               chooseOne(GetEnv("GO_DISCOVERY_DATABASE_HOST", "localhost")),
DBUser:               GetEnv("GO_DISCOVERY_DATABASE_USER", "postgres"),
DBPassword:           os.Getenv("GO_DISCOVERY_DATABASE_PASSWORD"),
DBSecondaryHost:      chooseOne(os.Getenv("GO_DISCOVERY_DATABASE_SECONDARY_HOST")),
DBPort:               GetEnv("GO_DISCOVERY_DATABASE_PORT", "5432"),
DBName:               GetEnv("GO_DISCOVERY_DATABASE_NAME", "discovery-db"),
</code></pre></div></div>

<h2 id="running-pkgsite">Running pkgsite</h2>

<h3 id="a-simple-pkgsite">A simple pkgsite</h3>

<p>You can run a simple pkgsite with <code class="language-plaintext highlighter-rouge">go run cmd/pkgsite/main.go -proxy=URL</code>, but
it is only hosts documentation for a single repo. So, we’ll move on from this.</p>

<h3 id="standing-up-a-real-pkgsite">Standing up a real pkgsite</h3>

<p>We’ll need five things running:</p>

<ul>
  <li>A go proxy server.</li>
  <li>A go index server.</li>
  <li>A postgres database.</li>
  <li>The pkgsite frontend.</li>
  <li>The pkgsite worker.</li>
</ul>

<h4 id="proxy">Proxy</h4>

<p>We’ll assume you already have a proxy server. But if not, check out
https://github.com/goproxy/goproxy as one option.</p>

<h4 id="index">Index</h4>

<p>A simple index server is given at https://github.com/jeanbza/golang-index. You
may wish to build your own, though. Its role is simple, and described at
https://github.com/golang/pkgsite/blob/master/doc/design.md.</p>

<h4 id="postgres">Postgres</h4>

<p>There are numerous ways to run a postgres database. Here’s something quick,
written for a Mac, to get you started:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>postgresql@17
<span class="c"># Note: Don't forget the part where homebrew asks you to add to your PATH.</span>
<span class="c"># Note: homebrew may make $USERNAME the default username, not "postgres".</span>
brew services start postgresql@17
createdb discovery-db

<span class="c"># Now, let's set up the tables necessary by running all the migrations.</span>
<span class="k">for </span>f <span class="k">in</span> <span class="sb">`</span><span class="nb">ls </span>pkgsite/migrations<span class="sb">`</span><span class="p">;</span> <span class="k">do </span>psql <span class="nt">-d</span> discovery-db <span class="nt">-a</span> <span class="nt">-f</span> <span class="s2">"pkgsite/migrations/</span><span class="nv">$f</span><span class="s2">"</span><span class="p">;</span> <span class="k">done</span><span class="p">;</span>
</code></pre></div></div>

<p>Check out your tables with,</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>psql <span class="nt">-d</span> discovery-db
<span class="se">\d</span>t
</code></pre></div></div>

<h4 id="frontend">Frontend</h4>

<p>Now, let’s run the frontend:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>pkgsite
<span class="c"># You may need to set GO_DISCOVERY_DATABASE_USER=myusername.</span>
go run cmd/frontend/main.go <span class="se">\</span>
    <span class="nt">-local</span> <span class="se">\</span>
    <span class="nt">-proxy_url</span><span class="o">=</span>https://url-to-my-proxy <span class="se">\</span>
    <span class="nt">-bypass_license_check</span><span class="o">=</span><span class="nb">true</span>
</code></pre></div></div>

<h4 id="worker">Worker</h4>

<p>Finally, let’s run the worker:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># You may need to set GO_DISCOVERY_DATABASE_USER=myusername.</span>
<span class="nv">GO_MODULE_PROXY_URL</span><span class="o">=</span>https://url-to-my-proxy <span class="se">\</span>
    <span class="nv">GO_MODULE_INDEX_URL</span><span class="o">=</span>https://url-to-my-index <span class="se">\</span>
    go run cmd/worker/main.go <span class="se">\</span>
    <span class="nt">-bypass_license_check</span><span class="o">=</span><span class="nb">true</span>
</code></pre></div></div>

<p>Note: If you’re using <code class="language-plaintext highlighter-rouge">github.com/jeanbza/golang-index</code>, the proxy runs (as of
this writing) at <code class="language-plaintext highlighter-rouge">http://localhost:8081</code>. You’ll note this is raw http. Trying
to run the worker with a non-TLS’d GO_MODULE_INDEX_URL will result in an error.
Get around this by making the worker accept a non-https index by commenting out
the https validation at <code class="language-plaintext highlighter-rouge">pkgsite/internal/index/index.go</code>’s <code class="language-plaintext highlighter-rouge">New()</code> function.</p>

<h3 id="poke-the-worker">Poke the worker</h3>

<p>The worker will periodically do work, but you can poke it by either visiting
http://localhost:8000 and clicking the poll/enqueue buttons, or by something
like,</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Assuming the worker is running at localhost:8000.</span>
<span class="k">while </span><span class="nb">true</span> <span class="p">;</span> <span class="k">do </span><span class="nb">date</span> <span class="o">&amp;&amp;</span> curl localhost:8000/enqueue <span class="o">&amp;&amp;</span> curl localhost:8000/poll <span class="o">&amp;&amp;</span> <span class="nb">sleep </span>20<span class="p">;</span> <span class="k">done</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="see-the-results">See the results</h3>

<p>Check the “modules” page at http://localhost:8000 to see how the worker is
getting along.</p>

<p>As it progresses, it populates the postgres database. You should begin to start
seeing modules through the frontend. To do so, navigate to
http://localhost:8080, where the frontend is hosted.</p>

<h2 id="useful-debugging">Useful debugging</h2>

<p>I found the following db commands useful:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">psql</span> <span class="o">-</span><span class="n">d</span> <span class="n">discovery</span><span class="o">-</span><span class="n">db</span>

<span class="o">#</span> <span class="n">List</span> <span class="n">tables</span><span class="p">.</span>
<span class="err">\</span><span class="n">dt</span>

<span class="o">#</span> <span class="k">Show</span> <span class="n">upcoming</span> <span class="n">processing</span><span class="p">.</span>
<span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">module_version_states</span><span class="p">;</span>
<span class="k">SELECT</span> <span class="n">module_path</span><span class="p">,</span> <span class="n">last_processed_at</span><span class="p">,</span> <span class="n">next_processed_after</span> <span class="k">FROM</span> <span class="n">module_version_states</span> <span class="k">WHERE</span> <span class="n">module_path</span> <span class="k">LIKE</span> <span class="s1">'corp%'</span><span class="p">;</span>

<span class="o">#</span> <span class="k">Update</span> <span class="n">processing</span> <span class="nb">time</span><span class="p">.</span>
<span class="k">UPDATE</span> <span class="n">module_version_states</span> <span class="k">SET</span> <span class="n">next_processed_after</span> <span class="o">=</span> <span class="n">next_processed_after</span> <span class="o">-</span> <span class="n">INTERVAL</span> <span class="s1">'2 HOUR'</span> <span class="k">WHERE</span> <span class="n">module_path</span> <span class="o">=</span> <span class="s1">'corp/eas-protomd'</span><span class="p">;</span>

<span class="o">#</span> <span class="n">How</span> <span class="n">many</span> <span class="n">we</span> <span class="n">know</span> <span class="n">about</span><span class="p">.</span>
<span class="k">SELECT</span> <span class="k">DISTINCT</span><span class="p">(</span><span class="n">module_path</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">modules</span><span class="p">;</span>
<span class="k">SELECT</span> <span class="k">COUNT</span><span class="p">(</span><span class="k">version</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">modules</span><span class="p">;</span>

<span class="o">#</span> <span class="k">Drop</span> <span class="n">it</span> <span class="k">all</span> <span class="k">and</span> <span class="k">start</span> <span class="n">over</span><span class="p">.</span>
<span class="k">TRUNCATE</span> <span class="n">documentation</span><span class="p">,</span> <span class="n">documentation_symbols</span><span class="p">,</span> <span class="n">excluded_prefixes</span><span class="p">,</span> <span class="n">imports</span><span class="p">,</span> <span class="n">imports_unique</span><span class="p">,</span> <span class="n">latest_module_versions</span><span class="p">,</span> <span class="n">legacy_documentation_symbols</span><span class="p">,</span> <span class="n">licenses</span><span class="p">,</span> <span class="n">module_version_states</span><span class="p">,</span> <span class="n">modules</span><span class="p">,</span> <span class="n">package_symbols</span><span class="p">,</span> <span class="n">package_version_states</span><span class="p">,</span> <span class="n">paths</span><span class="p">,</span> <span class="n">readmes</span><span class="p">,</span> <span class="n">search_documents</span><span class="p">,</span> <span class="n">symbol_history</span><span class="p">,</span> <span class="n">symbol_names</span><span class="p">,</span> <span class="n">symbol_search_documents</span><span class="p">,</span> <span class="n">units</span><span class="p">,</span> <span class="n">version_map</span><span class="p">;</span>
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[Who this is for]]></summary></entry><entry><title type="html">Engineering resources from Google</title><link href="http://localhost:4000/2022/12/07/google-resources.html" rel="alternate" type="text/html" title="Engineering resources from Google" /><published>2022-12-07T00:55:23-07:00</published><updated>2022-12-07T00:55:23-07:00</updated><id>http://localhost:4000/2022/12/07/google-resources</id><content type="html" xml:base="http://localhost:4000/2022/12/07/google-resources.html"><![CDATA[<h1 id="engineering-resources-from-google">Engineering resources from Google</h1>

<p>This is a collection of extremely useful internal resources, which are made
publicly available. I thought I’d share these, since they are a bit hard to find
externally. And, they really are fantastic - years and years of tweaks and
discussions and refinement have gone into these, from some of the great minds
of computer science.</p>

<p>So, enjoy, as I have:</p>

<h2 id="the-swe-book">The “SWE book”</h2>

<p><a href="https://abseil.io/resources/swe-book">https://abseil.io/resources/swe-book</a></p>

<p>The “SWE book” - Google Engineering Practices Documentation. A classic.</p>

<h2 id="the-sre-book">The “SRE book”</h2>

<p><a href="https://sre.google/sre-book/table-of-contents/">https://sre.google/sre-book/table-of-contents/</a></p>

<p>Another classic, more on the operation side of things.</p>

<h2 id="how-to-code-review">How to code review</h2>

<p><a href="https://google.github.io/eng-practices/">https://google.github.io/eng-practices/</a></p>

<p>The page is called “Google Engineering Practices Documentation” because the
internal version is more broad, but the external version has the bits about how
reviewers and reviewees of code changes should interact. These are <em>fantastic</em>
guidelines for a healthy engineering culture.</p>

<h2 id="the-go-style-guide">The Go style guide</h2>

<p><a href="https://google.github.io/styleguide/go/">https://google.github.io/styleguide/go/</a></p>

<p>How to write “good” Go code at Google. Some of it is convention, but a lot of it
is sensical and very well thought out rules of the road when writing Go code.</p>

<p>(I’m biased, having contributed some of these sections!)</p>

<h2 id="other-language-style-guides">Other language style guides</h2>

<p><a href="https://google.github.io/styleguide/">https://google.github.io/styleguide/</a></p>

<p>Well, I mostly care about Go, hence the callout, but here are the other language
styleguide.</p>

<p>I’ll also call out the C++ as being fantastic. I’ve not used the others as much
but I expect them all to be of a very high quality.</p>

<h1 id="post-note">Post-note</h1>

<p>I will continue editing this article as I find more. Stay tuned!</p>

<p>(I wonder if this will turn into a “How to re-create Google’s engineering department in your company”… 🤔)</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Engineering resources from Google]]></summary></entry><entry><title type="html">Interfaces in depth</title><link href="http://localhost:4000/2022/12/05/interfaces.html" rel="alternate" type="text/html" title="Interfaces in depth" /><published>2022-12-05T00:55:23-07:00</published><updated>2022-12-05T00:55:23-07:00</updated><id>http://localhost:4000/2022/12/05/interfaces</id><content type="html" xml:base="http://localhost:4000/2022/12/05/interfaces.html"><![CDATA[<h2 id="foreword">Foreword</h2>

<p>A conversation with a colleague inspired a deep dive into the refspec, to gain
concrete understanding on some things I had until then only had intuitions
about. I ended up writing nearly an article to that colleague in chat
(sorry colleague…), so I thought I’d take it over the finish line and actually
write the article that my chat message was trying to be.</p>

<p>This is that article.</p>

<h2 id="impetus">Impetus</h2>

<p>This article is inspired by the following confusion:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">myInterface</span> <span class="k">interface</span><span class="p">{</span> <span class="n">hello</span><span class="p">()</span> <span class="p">}</span>
<span class="k">var</span> <span class="n">m1</span> <span class="n">myInterface</span> <span class="o">=</span> <span class="n">implementsMyInterface</span><span class="p">{}</span>
<span class="n">m1</span><span class="o">.</span><span class="n">hello</span><span class="p">()</span> <span class="c">// works!</span>
<span class="k">var</span> <span class="n">m2</span> <span class="o">*</span><span class="n">myInterface</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">m1</span>
<span class="n">m2</span><span class="o">.</span><span class="n">hello</span><span class="p">()</span> <span class="c">// does not work</span>
</code></pre></div></div>

<p><a href="https://go.dev/play/p/g56XEBk_OLs">play/p/g56XEBk_OLs</a></p>

<p>The core question is: Why can we use <code class="language-plaintext highlighter-rouge">m1</code>, not <code class="language-plaintext highlighter-rouge">m2</code>?</p>

<p><strong>TLDR</strong>: Go veterans will realise that pointer to interface is an anti-pattern.
It represents kind of a misunderstanding of what’s going on: the user almost
certainly wants a pointer to the <em>struct</em>. Both concrete structs and pointer to
structs can implement interfaces. That’s the intuition I mentioned above. But,
let’s dive into this a bit and figure out what’s behind this.</p>

<h2 id="what-are-interfaces-anyway">What are interfaces, anyway?</h2>

<p>From <a href="https://go.dev/blog/laws-of-reflection">Laws of reflection</a>,</p>

<blockquote>
  <p>A variable of interface type stores a pair: the concrete value assigned to the
variable, and that value’s type descriptor.</p>
</blockquote>

<p>So, I’ll simplify this a bit to the hand-wavy description that an interface type
points to a concrete type. For example, consider an interface type that is
implemented by a struct:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">foo</span> <span class="n">someInterface</span> <span class="o">=</span> <span class="n">someStruct</span><span class="p">{}</span>
</code></pre></div></div>

<p>Here, <code class="language-plaintext highlighter-rouge">foo</code> is a variable whose type is <code class="language-plaintext highlighter-rouge">someInterface</code>. Its interface type
“points” (“holds” / “is assigned” / etc) to <code class="language-plaintext highlighter-rouge">someStruct</code>.</p>

<p>Let’s modify that a bit:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">foo</span> <span class="n">someInterface</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">someStruct</span><span class="p">{}</span>
</code></pre></div></div>

<p>Here, <code class="language-plaintext highlighter-rouge">foo</code> is a variable whose type is <code class="language-plaintext highlighter-rouge">someInterface</code> which points to a
pointer which points to <code class="language-plaintext highlighter-rouge">someStruct</code>.</p>

<p>Ok… still in normal territory. Now let’s go back to where this question came
from and consider if <code class="language-plaintext highlighter-rouge">foo</code> was of type <code class="language-plaintext highlighter-rouge">*someInterface</code> instead:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">foo</span> <span class="n">someInterface</span> <span class="o">=</span> <span class="n">someStruct</span><span class="p">{}</span>
<span class="k">var</span> <span class="n">bar</span> <span class="n">someInterface</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">someStruct</span><span class="p">{}</span>

<span class="k">var</span> <span class="n">gaz</span> <span class="o">*</span><span class="n">someInterface</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">foo</span> <span class="c">// bad</span>
<span class="k">var</span> <span class="n">urk</span> <span class="o">*</span><span class="n">someInterface</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">bar</span> <span class="c">// also bad</span>
</code></pre></div></div>

<p>Here, <code class="language-plaintext highlighter-rouge">gaz</code> and <code class="language-plaintext highlighter-rouge">urk</code> are pointers to an interface. That’s almost certainly user
error. Pointers to structs are useful,</p>

<ul>
  <li>They allow us to avoid copying when passing structs around.</li>
  <li>They allow us to modify and persist struct state.</li>
</ul>

<p>But, what does a pointer to an interface type give us? Nothing!</p>

<ul>
  <li>An interface type is already a type of pointer as it is, so there’s no copying
when we pass it around.</li>
  <li>An interface type has no state itself. Its implementing type - a struct - can,
but not the interface itself. So there’s no modify/persist state benefit.</li>
</ul>

<h2 id="interfaces-behave-different-than-structs">Interfaces behave different than structs</h2>

<p>Ok, so we’ve talked about how interfaces are fundamentally different, and that
variables conceptually should (usually) not use interface pointer types; in
constrast to structs, where pointers to structs are very common and useful.</p>

<p>Now let’s look at how struct and interface types behave differently with regards
to pointer referencing and dereferencing. Let’s do so by collecting together a
few facts about interfaces from the refspec, to prepare for our conclusion:</p>

<h3 id="a-struct-can-implement-an-interface-with-concrete-or-pointer-method-receivers">A struct can implement an interface with concrete or pointer method receivers</h3>

<p>A struct can implement an interface with either concrete or pointer method
receivers. Per
<a href="https://go.dev/ref/spec#Interface_types">ref/spec#Interface_types</a>, there’s no
way to specify concrete or pointer method receiver in an interface. (indeed,
it’s moot to the interface: the interface defines, well, the interface, not the
implementation details)</p>

<p>Concretely, both these structs implement the interface:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">myInterface</span> <span class="k">interface</span><span class="p">{</span> <span class="n">hello</span><span class="p">()</span> <span class="p">}</span>

<span class="k">type</span> <span class="n">concreteMethodReceivers</span> <span class="k">struct</span><span class="p">{}</span>
<span class="k">func</span> <span class="p">(</span><span class="n">m</span> <span class="n">concreteMethodReceivers</span><span class="p">)</span> <span class="n">hello</span><span class="p">()</span> <span class="p">{}</span>

<span class="k">type</span> <span class="n">pointerMethodReceivers</span> <span class="k">struct</span><span class="p">{}</span>
<span class="k">func</span> <span class="p">(</span><span class="n">m</span> <span class="o">*</span><span class="n">pointerMethodReceivers</span><span class="p">)</span> <span class="n">hello</span><span class="p">()</span> <span class="p">{}</span>
</code></pre></div></div>

<p><a href="https://go.dev/play/p/sjU9d72ZWzw">play/p/sjU9d72ZWzw</a></p>

<h3 id="selectors-automatically-dereference-pointers-to-structs">Selectors automatically dereference pointers to structs</h3>

<p>Selectors automatically dereference pointers to structs <a href="https://go.dev/ref/spec#Method_values">ref/spec#Method_values</a>:</p>

<blockquote>
  <p>As with selectors, a reference to a non-interface method with a value receiver using a pointer will automatically dereference that pointer: pt.Mv is equivalent to (*pt).Mv.</p>
</blockquote>

<p>So, for implementing interfaces:</p>

<ul>
  <li>If you have a struct that implements the interface with
<em>concrete method receivers</em>, you can use either concrete struct or pointer
to your struct as type for interface (latter will be de-referenced).</li>
  <li>If you have a struct that implements the interface with
<em>pointer method receivers</em>, you have to use pointer to your struct as type
for interface (concrete struct <em>won’t</em> be automatically turned to pointer).</li>
</ul>

<p>Concretely:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">f1</span> <span class="n">foo</span> <span class="o">=</span> <span class="n">concreteMethodReceiverStruct</span><span class="p">{}</span>
<span class="n">f1</span><span class="o">.</span><span class="n">Hello</span><span class="p">()</span> <span class="c">// works</span>

<span class="k">var</span> <span class="n">f2</span> <span class="n">foo</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">concreteMethodReceiverStruct</span><span class="p">{}</span>
<span class="n">f2</span><span class="o">.</span><span class="n">Hello</span><span class="p">()</span> <span class="c">// works</span>

<span class="k">var</span> <span class="n">f3</span> <span class="n">foo</span> <span class="o">=</span> <span class="n">pointerMethodReceiverStruct</span><span class="p">{}</span>
<span class="n">f3</span><span class="o">.</span><span class="n">Hello</span><span class="p">()</span> <span class="c">// does not work</span>

<span class="k">var</span> <span class="n">f4</span> <span class="n">foo</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">pointerMethodReceiverStruct</span><span class="p">{}</span>
<span class="n">f4</span><span class="o">.</span><span class="n">Hello</span><span class="p">()</span> <span class="c">// works</span>
</code></pre></div></div>

<p><a href="https://go.dev/play/p/aWQ8C2-SwZ2">play/p/aWQ8C2-SwZ2</a></p>

<h3 id="pointers-to-interfaces-do-not-automatically-dereference">Pointers to interfaces do not automatically dereference</h3>

<p>Pointers to interfaces do not automatically dereference, like pointers to
structs do. (they used to in pre-Go1, fwiw; <a href="https://groups.google.com/g/golang-nuts/c/RhIIHM3XC4o">g/golang-nuts/c/RhIIHM3XC4o</a>)</p>

<p>Concretely:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">thing</span> <span class="n">myInterface</span> <span class="o">=</span> <span class="n">myStruct</span><span class="p">{}</span>
<span class="n">thing</span><span class="o">.</span><span class="n">Whatever</span><span class="p">()</span> <span class="c">// works</span>
<span class="k">var</span> <span class="n">thing2</span> <span class="o">*</span><span class="n">myInterface</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">thing</span>
<span class="n">thing2</span><span class="o">.</span><span class="n">Whatever</span><span class="p">()</span> <span class="c">// does not work</span>
</code></pre></div></div>

<p><a href="https://go.dev/play/p/9QBQmO4-nZN">play/p/9QBQmO4-nZN</a></p>

<h2 id="putting-it-all-together">Putting it all together</h2>

<p>So, let’s talk about the various ways you can declare and use an <strong>interface</strong>.
As mentioned before and shown with
<a href="https://go.dev/play/p/aWQ8C2-SwZ2">play/p/aWQ8C2-SwZ2</a>:</p>

<ul>
  <li>✅ can implement interface with concrete type method receiver + concrete type</li>
  <li>✅ can implement interface with concrete type method receiver + pointer type (<em>auto de-reference</em>)</li>
  <li>❌ can implement interface with pointer type method receiver + concrete type (<em>no auto reference</em>)</li>
  <li>✅ can implement interface with pointer type method receiver + pointer type</li>
</ul>

<p>Now, let’s contrast that with the various ways that you can declare and use a
<strong>struct</strong>. As shown with
<a href="https://go.dev/play/p/IfD0MGTLT_n">play/p/IfD0MGTLT_n</a> and spelled out in
<a href="https://go.dev/ref/spec#Method_values">ref/spec#Method_values</a>:</p>

<ul>
  <li>✅ can call concrete type method receiver with concrete type</li>
  <li>✅ can call pointer type method receiver with concrete type (<em>auto reference</em>)</li>
  <li>✅ can call concrete type method receiver with pointer type (<em>auto de-reference</em>)</li>
  <li>✅ can call pointer type method receiver with pointer type</li>
</ul>

<p>So, the rules for structs and interfaces are different, to prevent interface
mis-use.</p>

<h2 id="afterword">Afterword</h2>

<p>You can read more about how interfaces are represented here:</p>

<ul>
  <li><a href="https://research.swtch.com/interfaces">Go Data Structures: Interfaces</a> by rsc@</li>
  <li><a href="https://www.airs.com/blog/archives/277">Go Interfaces</a> by iant@</li>
  <li><a href="https://go.dev/blog/laws-of-reflection">Laws of Reflection</a> by r@</li>
</ul>]]></content><author><name></name></author><summary type="html"><![CDATA[Foreword]]></summary></entry><entry><title type="html">Graceful degradation with the logistic function</title><link href="http://localhost:4000/2022/05/05/logistic-function-backoff.html" rel="alternate" type="text/html" title="Graceful degradation with the logistic function" /><published>2022-05-05T15:55:23-06:00</published><updated>2022-05-05T15:55:23-06:00</updated><id>http://localhost:4000/2022/05/05/logistic-function-backoff</id><content type="html" xml:base="http://localhost:4000/2022/05/05/logistic-function-backoff.html"><![CDATA[<h1 id="graceful-degradation-with-the-logistic-function">Graceful degradation with the logistic function</h1>

<p>I recently worked on a server throttling feature in one of our build stack’s busiest binaries. We serve files from this binary, which is deployed as tens of thousands of tasks, which cumulatively serve millions of QPS.</p>

<p>Sometimes, one of these tasks gets a large memory spike. The cause for this is that the task is asked to hold a single file, and before it gets replicated, the file is needed by tens of thousands of peers, who all bombard the task with RPCs. Handling all these requests causes a huge spike in memory, and the task falls over.</p>

<p>Eventually replication catches up, and there are enough peers to spread the load. But we’d like to fail more gracefully than just OOM =&gt; death. We’d like to monitor the current and allocated memory, and gradually reject requests (throttle) when current memory exceeds allocated memory.</p>

<h1 id="abrupt-degradation">Abrupt degradation</h1>

<p>A simple way to abruptly degrade is to reject requests above the allocated amount. We can model that with a simple step function. For the sake of example, let’s imagine that our allocated memory is <code class="language-plaintext highlighter-rouge">3GiB = 3221225472 bytes</code>. We don’t want to hit 3GiB exactly, since that’s roughly where we’ll OOM, so let’s start throttling a bit before that: at <code class="language-plaintext highlighter-rouge">3000000000 bytes = 3e9 bytes</code> (number chosen because it’s conveniently round, and close to 3GiB 🙂).</p>

\[f(x) = \left\{
        \begin{array}{ll}
            1 &amp; \quad x \ge 3e9 \\
            0 &amp; \quad x &lt; 3e9
        \end{array}
    \right.\]

<p>Here, 0 means “don’t reject”, and 1 means “reject”.</p>

<p>But, this is inefficient: we’re not using all our available memory. In a resource constrained environment, or when we’re highly scaled, we really want to squeeze every bit of memory that we can, and leaving a huge buffer untouched is far too wasteful.</p>

<h1 id="gradual-degradation">Gradual degradation</h1>

<p>It’s starting to sound like we need a linear function, not a stepwise function: something that rejects more and more requests the more memory we’re using. We now need a range to operate our throttler within: at the bottom of the range, we reject no requests; at the top, all requests.</p>

<p>Let’s define our range as <code class="language-plaintext highlighter-rouge">[3e9 bytes, 3221225472 bytes]</code>, using the same bounds as our step function above.</p>

<p>So, let’s build a linear function for this. Note that the values that we want from our linear function are <code class="language-plaintext highlighter-rouge">[0.0, 1.0]</code>. As above, 0 means “don’t reject”, and 1 means “reject”. Any value between that represents that chance that a request will be rejected. That is, we’ll compare the result of our linear function against a number taken randomly from a uniform distribution of <code class="language-plaintext highlighter-rouge">[0.0, 1.0]</code>.</p>

<p>To build this linear function, let’s start with what we know:</p>

<ul>
  <li>Linear functions look like $f(x)=a \cdot x + b$</li>
  <li>$f(3e9)=0$</li>
  <li>$f(3221225472)=1$</li>
</ul>

<p>We can use this to solve the equation:</p>

\[\begin{split}
0 = a \cdot 3e9 + b\\
-b = 3e9 \cdot a\\
b = -3e9 \cdot a
\end{split}
\quad\quad
\begin{split}
1 = a \cdot 3221225472 + b\\
1 - b = a \cdot 3221225472\\
-b = a \cdot 3221225472 - 1\\
b = -a \cdot 3221225472 + 1
\end{split}\\ \text{ } \\ \text{ } \\
-3e9 \cdot a = -a \cdot 3221225472 + 1 \\
-3e9 \cdot a + a \cdot 3221225472 = 1 \\
a \cdot (-3e9 + 3221225472) = 1 \\
a = 1/221225472\]

<p>Now that we know <code class="language-plaintext highlighter-rouge">a</code>, let’s use that and either of the two partial solutions above to find <code class="language-plaintext highlighter-rouge">b</code>:</p>

\[1 = a \cdot 3221225472 + b\\
1 = 3221225472/221225472 + b\\
b = 1 - 3221225472/221225472\\
b = -1953125/144027\]

<p>Our stepwise function accordingly gets an embedded linear function:</p>

\[f(x) = \left\{
        \begin{array}{ll}
            x/221225472 - 1953125/144027  &amp; \quad x \ge 3e9 \\
            0 &amp; \quad x &lt; 3e9
        \end{array}
    \right.\]

<p><img src="/assets/linear.png" alt="" /></p>

<p>We can verify that this works by plugging in our original numbers:</p>

\[\begin{split}
f(x) = x/221225472 - 1953125/144027\\
f(x) = 3e9/221225472 - 1953125/144027\\
f(x) = 0
\end{split}
\quad\quad
\begin{split}
f(x) = x/221225472 - 1953125/144027\\
f(x) = 3221225472/221225472 - 1953125/144027\\
f(x) = 1
\end{split}\\\]

<h1 id="linear-function-downsides">Linear function downsides</h1>

<p>This is a lot nicer, but we can do better. If our binary is <em>expected</em> to consistently “run hot” (use most of its allocated memory), the linear function may be too aggressive.</p>

<p>Consider a binary that fairly consistently runs somewhere in the bottom 10-30% of the throttle memory range. A linear function will accordingly throttle 10-30% of requests. That’s expensive! Particularly if the incoming RPCs have a wide range of memory footprints: throttling 10-30% of requests when those requests may have negligible impact on memory is wasteful. And we can’t just make our memory range smaller. Doing so is dangerous: the smaller the range, the easier it is for a request to cause our memory to jump to the end of the range and OOM the process.</p>

<p>And, the second half of the linear function range is a problem too: it ramps up too slowly! When we’re 90% into our range, we’d like to be throttling most all requests, since it may only take a few expensive requests to jump right to the end and OOM the process.</p>

<p>We need to find a function with a better shape.</p>

<h1 id="graceful-degradation">Graceful degradation</h1>

<p>The <a href="https://en.wikipedia.org/wiki/Logistic_function">logistic function</a> has a better shape for server throttling.</p>

<p>Here’s the shape of the logistic function:</p>

<p><img src="/assets/logistic.png" alt="" /></p>

<p>Its S-shaped curve allows more requests through when we’re at the bottom of our range, and aggressively throttles at the end of our range.</p>

<p>The equation for the logistic function is as follows,</p>

\[\begin{align*}
f(x) = \dfrac{L}{1 + e^{-k(x-x_0)}}
\end{align*}\]

<p>Where,</p>

<ul>
  <li>$x_0$ is the x value of the sigmoid’s midpoint</li>
  <li>L is the curve’s maximum value</li>
  <li>k is the logistic growth rate or steepness of the curve</li>
</ul>

<p>Let’s adapt this to our problem:</p>

<p>L is the easiest: we want the maximum value to be 1 (we want our range to be <code class="language-plaintext highlighter-rouge">[0.0, 1.0]</code>), So, <code class="language-plaintext highlighter-rouge">L=1</code>.</p>

<p>$x_0$ is fairly straightforward: the midpont should be the midpoint between the start and end of our range. So,</p>

\[\begin{align}
x_0 = 3221225472-\left(\dfrac{3221225472-3e9}{2}\right)\\
x_0 = 3110612736
\end{align}\]

<p>Now we have,</p>

\[\begin{align*}
f(x) = \dfrac{L}{1 + e^{-k(x-x_0)}}\\
f(x) = \dfrac{1}{1 + e^{-k(x-3110612736)}}
\end{align*}\]

<p>k is the hardest. Let’s start by solving for k in the equation above:</p>

\[\begin{align*}
f(x) = \dfrac{1}{1 + e^{-k\left(x-3110612736\right)}}\\
f(x)\left(1 + e^{-k(x-3110612736)}\right) = 1\\
1 + e^{-k(x-3110612736)} = \dfrac{1}{f(x)}\\
e^{-k(x-3110612736)} = \dfrac{1}{f(x)}-1\\
-k(x-3110612736) = ln\left(\dfrac{1}{f(x)}-1\right)\\
k(x-3110612736) = -ln\left(\dfrac{1}{f(x)}-1\right)\\
k = \dfrac{-ln\left(\dfrac{1}{f(x)}-1\right)}{x-3110612736}\\
\end{align*}\]

<p>Now we return to what we know about how this curve <em>should</em> behave:</p>

<ul>
  <li>$f(3e9)=0$</li>
  <li>$f(3221225472)=1$</li>
</ul>

<p>Unfortunately, using either of these results in an unsolvable equation:</p>

\[\begin{split}
k = \dfrac{-ln\left(\dfrac{1}{f(x)}-1\right)}{x-3110612736}\\
k = \dfrac{-ln\left(\dfrac{1}{0}-1\right)}{3e9-3110612736}\\
\text{NaN: can't divide by 0}
\end{split}
\quad\quad
\begin{split}
k = \dfrac{-ln\left(\dfrac{1}{f(x)}-1\right)}{x-3110612736}\\
k = \dfrac{-ln\left(\dfrac{1}{1}-1\right)}{3221225472-3110612736}\\
k = \dfrac{-ln(0)}{3221225472-3110612736}\\
\text{NaN: natural log of 0 is undefined}
\end{split}\]

<p>So, that’s a bummer. But it makes sense: the logistic function is asymptotic, with asymptotes 0 and 1: it will never actually reach those values!</p>

<p>So, let’s estimate k by choosing a value close to the asymptotes: either .01 for the lower bound, or .99 for the upper bound. It doesn’t matter which one we do, as the curve is reflected around the midpoint. So, let’s use the upper:</p>

\[k = \dfrac{-ln\left(\dfrac{1}{f(x)}-1\right)}{x-3110612736}\\
k = \dfrac{-ln\left(\dfrac{1}{.99}-1\right)}{3221225472-3110612736}\\
k = \dfrac{-ln(0.0101010101)}{110612736}\\
k = \dfrac{4.59511985023}{110612736}\\
k = \dfrac{4.595119}{110612736}\\
k = .0000000415424043\]

<p>Great! Let’s put it all together:</p>

\[\begin{align*}
f(x) = \dfrac{L}{1 + e^{-k(x-x_0)}}\\
f(x) = \dfrac{1}{1 + e^{-.0000000415424043(x-3110612736)}}
\end{align*}\]

<p><img src="/assets/logistic_real.png" alt="" /></p>

<p>We can verify that this works by plugging in our original numbers:</p>

\[\begin{split}
f(x) = \dfrac{1}{1 + e^{-.0000000415424043(x-3110612736)}}\\
f(x) = \dfrac{1}{1 + e^{-.0000000415424043(3e9-3110612736)}}\\
f(x) = 0.01000000841
\end{split}
\quad\quad
\begin{split}
f(x) = \dfrac{1}{1 + e^{-.0000000415424043(x-3110612736)}}\\
f(x) = \dfrac{1}{1 + e^{-.0000000415424043(3221225472-3110612736)}}\\
f(x) = 0.98999999158
\end{split}\\\]

<p>Since we’re approximating values and will never reach 0 or 1, it’s helpful to continue using the stepwise function to guarantee no throttling when we’re below our threshold, and to always throttle when we’re above our allowable range:</p>

\[f(x) = \left\{
        \begin{array}{ll}
            1 &amp; \quad x \ge 3221225472 \\
            \dfrac{1}{1 + e^{-.0000000415424043(x-3110612736)}}  &amp; \quad 3e9 \le x &lt; 3221225472  \\
            0 &amp; \quad x &lt; 3e9
        \end{array}
    \right.\]

<h1 id="implementing-logistic-function-server-throttling">Implementing logistic function server throttling</h1>

<p>Implementing server throttling with the logistic function is fairly straight forward, adding another positive to its list of positives:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// This example written in Go. It uses RPC semantics, like protobufs and</span>
<span class="c">// google.golang.org/grpc/status, but the tools don't really matter. http or any</span>
<span class="c">// other communication protocol works as well.</span>

<span class="k">func</span> <span class="p">(</span><span class="n">c</span> <span class="o">*</span><span class="n">Client</span><span class="p">)</span> <span class="n">HandleSomeRPC</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">req</span> <span class="o">*</span><span class="n">mypb</span><span class="o">.</span><span class="n">Request</span><span class="p">,</span> <span class="n">resp</span> <span class="o">*</span><span class="n">mypb</span><span class="o">.</span><span class="n">Response</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
  <span class="k">if</span> <span class="n">shouldThrottle</span><span class="p">(</span><span class="n">currentMemoryBytes</span><span class="p">(),</span> <span class="n">allocatedMemoryBytes</span><span class="p">(),</span> <span class="n">throttleRangeBytes</span><span class="p">())</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">status</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="n">codes</span><span class="o">.</span><span class="n">ResourceExhausted</span><span class="p">,</span> <span class="s">"out of memory - try again later"</span><span class="p">)</span>
  <span class="p">}</span>
  <span class="c">// ...</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">shouldThrottle</span><span class="p">(</span><span class="n">currentMemoryBytes</span><span class="p">,</span> <span class="n">allocatedMemoryBytes</span><span class="p">,</span> <span class="n">throttleRangeBytes</span> <span class="kt">uint64</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
	<span class="k">if</span> <span class="n">currentMemoryBytes</span> <span class="o">&lt;</span> <span class="n">allocatedMemoryBytes</span><span class="o">-</span><span class="n">throttleRangeBytes</span> <span class="p">{</span>
		<span class="k">return</span> <span class="no">false</span>
	<span class="p">}</span>
	<span class="k">if</span> <span class="n">currentMemoryBytes</span> <span class="o">&gt;</span> <span class="n">allocatedMemoryBytes</span><span class="o">+</span><span class="n">throttleRangeBytes</span> <span class="p">{</span>
		<span class="c">// Relevant if your process is in a scenario where max available memory</span>
		<span class="c">// is greater than max allocated memory (shared containers etc).</span>
		<span class="k">return</span> <span class="no">true</span>
	<span class="p">}</span>

	<span class="n">x</span> <span class="o">:=</span> <span class="n">currentMemoryBytes</span>
	<span class="n">x0</span> <span class="o">:=</span> <span class="n">allocatedMemoryBytes</span> <span class="o">-</span> <span class="p">(</span><span class="kt">uint64</span><span class="p">)(</span><span class="n">throttleRangeBytes</span><span class="o">/</span><span class="m">2</span><span class="p">)</span>
	<span class="n">L</span> <span class="o">:=</span> <span class="m">1.0</span>
	<span class="n">k</span> <span class="o">:=</span> <span class="p">(</span><span class="o">-</span><span class="m">1</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">Log</span><span class="p">((</span><span class="n">L</span><span class="o">/</span><span class="m">.01</span><span class="p">)</span><span class="o">-</span><span class="m">1</span><span class="p">))</span> <span class="o">/</span> <span class="p">(</span><span class="kt">float64</span><span class="p">)(</span><span class="n">allocatedMemoryBytes</span><span class="o">-</span><span class="n">x0</span><span class="p">)</span>

	<span class="c">// y1 is probability (0.00-1.00) which we roll against to determine whether</span>
	<span class="c">// to throttle or not. When it is 0, we never throttle (memory below allowed</span>
	<span class="c">// exceed). When it is 1, we always throttle (memory above allowed exceed).</span>
	<span class="n">y1</span> <span class="o">:=</span> <span class="n">L</span> <span class="o">/</span> <span class="p">(</span><span class="m">1.0</span> <span class="o">+</span> <span class="n">math</span><span class="o">.</span><span class="n">Exp</span><span class="p">(</span><span class="o">-</span><span class="n">k</span><span class="o">*</span><span class="p">(</span><span class="kt">float64</span><span class="p">)(</span><span class="n">x</span><span class="o">-</span><span class="n">x0</span><span class="p">)))</span>

	<span class="c">// y2 is a number between 0 and 1 to compare against y1.</span>
	<span class="n">y2</span> <span class="o">:=</span> <span class="n">rand</span><span class="o">.</span><span class="n">Float64</span><span class="p">()</span>

	<span class="k">return</span> <span class="n">y2</span> <span class="o">&lt;=</span> <span class="n">y1</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="conclusion">Conclusion</h1>

<p>At tremendous scale, it’s important to eke every last bit of memory from servers. It’s also important to be able to gracefully degrade during memory spikes, to avoid out-of-memory crashes. The logistic function is an excellent function for deciding whether to throttle requests, which strikes a good balance between the competing priorities of using all available memory and avoiding out-of-memory crashes.</p>

<script type="text/javascript" async="" src="/assets/MathJax-2.7.9/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>

<script type="text/x-mathjax-config">
    MathJax.Hub.Config({
      tex2jax: {
        inlineMath: [ ['$','$'], ["\\(","\\)"] ],
        processEscapes: true
      },
      extensions: [
        "MathMenu.js",
        "MathZoom.js",
        "AssistiveMML.js"
      ],
      jax: ["input/TeX", "output/CommonHTML"],
      TeX: {
        extensions: [
          "AMSmath.js",
          "AMSsymbols.js",
          "noErrors.js",
          "noUndefined.js",
        ]
      }
    });
  </script>]]></content><author><name></name></author><summary type="html"><![CDATA[Graceful degradation with the logistic function]]></summary></entry><entry><title type="html">Wrapped errors are stacks</title><link href="http://localhost:4000/2022/02/09/wrapped-errors-are-stacks.html" rel="alternate" type="text/html" title="Wrapped errors are stacks" /><published>2022-02-09T14:55:23-07:00</published><updated>2022-02-09T14:55:23-07:00</updated><id>http://localhost:4000/2022/02/09/wrapped-errors-are-stacks</id><content type="html" xml:base="http://localhost:4000/2022/02/09/wrapped-errors-are-stacks.html"><![CDATA[<h1 id="wrapped-errors-are-stacks">Wrapped errors are stacks</h1>

<p>Wrapping an error creates a stack: a linked list of error pointing to the next error, where newly wrapped errors are added to the head, and the stack is traversed from head to tail during As, Is, and with the Unwrap interface.</p>

<p>It’s important to keep this in mind when you’re designing the internal representation for your unwrappable structured error. The simplest representation is a single error:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>type decompressErr struct {
  name string
  err error // Points to the next error down the stack.
}

func (e *decompressErr) Error() string {
  return fmt.Sprintf("decompress %s: %s", e.name, e.err)  
}

func (e *decompressErr) Unwrap() error { return e.err }
</code></pre></div></div>

<p>Most unwrappable structured errors should only contain a single error. They have obvious semantics and are easy to use.</p>

<p>Unwrappable structured errors that contain multiple errors have much less clear semantics. Consider:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// We recommend against this approach.
type PathParseErrors struct {
  // A map of path to parse error for that path.
  errors map[string]error
}

func (e *PathParseErrors) Error() string {
  return fmt.Sprintf("%v", e.errors)
}

func (e *PathParseErrors) Unwrap() error {
  // Nothing we return here will be obvious.
}
</code></pre></div></div>

<p>In this example, the stack semantics are broken: we have an unwrappable structured error that contains a map of errors. But, which error will Unwrap return? There’s no right answer: any choice would be non-obvious to the user. A slice has the same issue as a map: there’s no obvious error to return.</p>

<p>This issue is exacerbated by the fact that it’s impossible for the author of PathParseErrors to document their Unwrap method in a way that will directly help users. Users often don’t interact with the Unwrap method directly: they use tools like As and Is, which themselves call the Unwrap method. And, this error may exist in a library that is several layers deep in a dependency tree: a user may have a very hard time finding the exact library whose documentation to go read when they’ve got an opaque stack of wrapped errors.</p>

<p>When you need to collect several errors at once, use <code class="language-plaintext highlighter-rouge">[]error</code>, a map of errors, or a structured error that does not support Unwrap.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Wrapped errors are stacks]]></summary></entry><entry><title type="html">Error unwrapping for library authors</title><link href="http://localhost:4000/2022/02/08/error-unwrapping.html" rel="alternate" type="text/html" title="Error unwrapping for library authors" /><published>2022-02-08T14:55:23-07:00</published><updated>2022-02-08T14:55:23-07:00</updated><id>http://localhost:4000/2022/02/08/error-unwrapping</id><content type="html" xml:base="http://localhost:4000/2022/02/08/error-unwrapping.html"><![CDATA[<h1 id="introduction">Introduction</h1>

<p>In https://go.dev/blog/go1.13-errors, Go introduced new language changes that improved how errors are handled in Go programs. These changes include the concept of wrapping errors, as well as tools and semantics for unwrapping errors. They have enabled a rich ecosystem of detailed errors, and given users more ways to examine errors..</p>

<p>Having had a few years to learn about how these tools can be used, let’s discuss some of the subtleties of wrapping and unwrapping, with an eye towards compatibility of our APIs. Accordingly, this article is particularly relevant to library authors, as we will often view wrapped errors through the lens of API compatibility.</p>

<h1 id="wrapped-errors-are-part-of-your-public-api">Wrapped errors are part of your public API</h1>

<p>In “Working with Errors in Go 1.13”, the authors wrote that “When adding additional context to an error, either with fmt.Errorf or by implementing a custom type, you need to decide whether the new error should wrap the original.”. There are numerous considerations that factor into whether to wrap an error, but library authors should specifically consider that wrapped errors become part of their public API.</p>

<p>Let’s re-examine one of the examples from that article:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>func Decompress(name, path string) error {
  // ...
  if err != nil {
    return fmt.Errorf("decompress %v: %v", name, err)
  }
  // ...
</code></pre></div></div>

<p>When we write error returns like this in our public APIs, users are given textual information but no structured information. They have no way of inspecting more than the string contents of the error handed to them: as the article states, “Creating a new error with fmt.Errorf discards everything from the original error except the text.”. We are therefore able to change any part of the error returned without causing any backwards incompatible changes, assuming users aren’t relying on the string contents of these errors.</p>

<p>Let’s now alter this example to return a structured, unwrappable error:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>type PathParseError struct {
  Path string
}
func (e *PathParseError) Error() string {
  return e.Path + ": could not be parsed"
}

// ...

func Decompress(name, path string) error {
  err := &amp;PathParseError{Path: path}
  if err != nil {
    return fmt.Errorf("decompress %v: %w", name, err)
  }
  // ...
}
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">We've now given</code> users powerful new capabilities for introspecting the returned error. Users now have structured information that they can rely on at runtime, such as the existence of PathParseError, and its fields; whereas before they could only string match the error contents, a practice that is usually discouraged.</p>

<p>But exposing that information to users comes with responsibility. When we only return unstructured errors, we often can be liberal in changing the string-only contents of our errors. However, when we return structured errors to users, we have to be more careful: removing the %w, or changing its value, will be noticeable behavior changes that affect how user code will interpret the returned error.</p>

<p>The subtlety here is that though the structure of the returned error changes when we remove %w or change its value, the type information remains the same - we still just return an error, not noticing that its underlying information has changed. Therefore users won’t observe these changes at compile time: they’ll observe them at run time.</p>

<p>To combat this, here are some tips:</p>

<ul>
  <li>Users should only rely on structured errors from stable libraries that they trust not to change.</li>
  <li>Authors of stable libraries should aim to preserve the behavior of their structured error returns. They should write tests that exercise all observable behavior to aid in that goal, and document which structured errors users can expect to interpret the returned error as.</li>
</ul>

<h1 id="wrapping-external-library-errors">Wrapping external library errors</h1>

<p>Let’s take this example a bit further by wrapping errors from external libraries in our code:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>package externaldep

type PathParseError struct {
  Path string
}

func ParsePath(path string) (string, error) {
  // ...
}
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>package mycode

func Decompress(name, path string) error {
  _, err := externaldep.ParsePath(path)
  if err != nil {
      return fmt.Errorf("decompress %v: %w", name, err)
  }
  // ...
}
</code></pre></div></div>

<p>As before, we have added to our public API by wrapping <code class="language-plaintext highlighter-rouge">externaldep.PathParseError</code> and returning it as our error. And as before, users can introspect the error we return and get an <code class="language-plaintext highlighter-rouge">externaldep.PathParseError</code>. But, <code class="language-plaintext highlighter-rouge">externaldep.PathParseError</code> lives in an external library - we have no control over it! Our users can now be broken by those external authors in the same ways we described above, without any type information changing.</p>

<p>These behavior changes can cause user breakages. The further that breakage happens from the user code, the harder it will be for the user to understand and debug. Each successive layer of external library error wrapping is an entirely different codebase that the debugger has to understand in the context of all the other codebases. The complexity increases quickly!</p>

<p>To combat this, here are some tips:</p>

<ul>
  <li>Users should prefer relying on structured errors closer to them than farther from them. A structured error that is 5 levels of libraries’ wrapping below them has a far greater chance of a breaking behavior change occurring than a structured error 1 level below them.</li>
  <li>Users should prefer relying on structured errors whose chain never relies on an unstable library.</li>
  <li>Authors of libraries should prefer not to wrap external library errors, unless the use case has well understood value and the external library is stable.</li>
</ul>

<h1 id="unwrap-is-part-of-your-public-api">Unwrap is part of your public API</h1>

<p>We’ve talked about the fact that wrapping errors changes the behavior of your public API. Let’s now discuss Unwrap, and how it can subtly become part of your public API.</p>

<p>When you return a structured error with an Unwrap method, users can use As, Is, and the Unwrap interface to introspect it and errors below it:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>err := Decompress(name, path)
if errors.Is(err, PathParseError) {
    // err, or some error that it wraps, is a path parse problem
}
</code></pre></div></div>

<p>Users may not be aware of new layers being added to the chain of errors:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>type decompressErr struct {
  name string
  err error
}

func (e *decompressErr) Error() string {
  return fmt.Sprintf("decompress %s: %s", e.name, e.err)  
}

func (e *decompressErr) Unwrap() error { return e.err }

func Decompress(name, path string) error {
  _, err := externaldep.ParsePath(path)
  if err != nil {
      return &amp;decompressErr{name: name, err: err}
  }
  // ...
}
</code></pre></div></div>

<p>Here, we’ve added an intermediary decompressErr. This might be useful somewhere else in our code that calls Decompress, but since it’s un-exported, users have no way to use it for introspection.</p>

<p>But, even though it’s un-exported, the Unwrap method is part of our public API. If we remove the Unwrap method, for example, the errors.Is example breaks: there is no Unwrap link between the returned error and the externaldep.PathParseError. Similarly, if we change Unwrap to behave differently, it will constitute a behavior change in our library.</p>

<p>To combat this, here is a tip:</p>

<ul>
  <li>In general, keep Unwrap simple and deterministic. It should just return the underlying error. If you find that your Unwrap logic is non-deterministic, or you need logic in Unwrap, it might be a signal that you shouldn’t be unwrapping.</li>
</ul>

<h1 id="conclusion">Conclusion</h1>

<p>Error wrapping is a powerful tool that provides upstream users a much richer set of functionality for understanding returned to them by downstream libraries. But, it’s important to be aware that supporting wrapped errors comes with responsibility for compatibility, like any other part of your API. And it’s important to consider whether your error type makes sense to be unwrapped at all.</p>

<p>For most code, it’s best to start simple: use %v instead of %w when you annotate errors, and don’t provide Unwrap on your custom error types. Wait until you learn about specific use cases for providing unwrap mechanics, and then carefully consider how to support them. We hope the considerations highlighted in this article help guide that decision.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Introduction]]></summary></entry><entry><title type="html">Contexts and Structs</title><link href="http://localhost:4000/2021/02/24/contexts-structs.html" rel="alternate" type="text/html" title="Contexts and Structs" /><published>2021-02-24T14:55:23-07:00</published><updated>2021-02-24T14:55:23-07:00</updated><id>http://localhost:4000/2021/02/24/contexts-structs</id><content type="html" xml:base="http://localhost:4000/2021/02/24/contexts-structs.html"><![CDATA[<p>Posted at <a href="https://go.dev/blog/context-and-structs">go.dev/blog/context-and-structs</a>.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Posted at go.dev/blog/context-and-structs.]]></summary></entry><entry><title type="html">Stubbing gRPC in Go</title><link href="http://localhost:4000/2020/10/08/stubbing-grpc.html" rel="alternate" type="text/html" title="Stubbing gRPC in Go" /><published>2020-10-08T15:55:23-06:00</published><updated>2020-10-08T15:55:23-06:00</updated><id>http://localhost:4000/2020/10/08/stubbing-grpc</id><content type="html" xml:base="http://localhost:4000/2020/10/08/stubbing-grpc.html"><![CDATA[<h1 id="introduction">Introduction</h1>

<p>I’ve several times been met with the question, “How do you stub gRPC in Go”?</p>

<p>This is a short blog post about how to do that.</p>

<h1 id="mocking">Mocking</h1>

<p>Mocking gRPC clients is <em>super easy</em> and doesn’t require a separate mocking
library. Given some proto with service,</p>

<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">service</span> <span class="n">Greeter</span> <span class="p">{</span>
    <span class="k">rpc</span> <span class="n">SayHello</span> <span class="p">(</span><span class="n">HelloRequest</span><span class="p">)</span> <span class="k">returns</span> <span class="p">(</span><span class="n">HelloReply</span><span class="p">)</span> <span class="p">{}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This will generate a <code class="language-plaintext highlighter-rouge">greeter.pb.go</code> with,</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">GreeterClient</span> <span class="k">interface</span> <span class="p">{</span>
    <span class="n">SayHello</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">in</span> <span class="o">*</span><span class="n">HelloRequest</span><span class="p">,</span> <span class="n">opts</span> <span class="o">...</span><span class="n">grpc</span><span class="o">.</span><span class="n">CallOption</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="n">HelloReply</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>That interface is all we need to mock away. Our code that communicates with
<code class="language-plaintext highlighter-rouge">Greeter</code> will take the <code class="language-plaintext highlighter-rouge">GreeterClient</code> interface, per usual dependency
injection. In our real code (<code class="language-plaintext highlighter-rouge">main.go</code>, etc) we’ll give it a real client,
and our tests we’ll give it a fake client:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// Code that uses GreeterClient</span>

<span class="k">type</span> <span class="n">SomeService</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">gc</span> <span class="o">*</span><span class="n">greeter</span><span class="o">.</span><span class="n">GreeterClient</span>
<span class="p">}</span>
<span class="c">// Inject me with either a real GreeterClient or a fake one!</span>
<span class="k">func</span> <span class="n">NewSomeService</span><span class="p">(</span><span class="n">gc</span> <span class="o">*</span><span class="n">greeter</span><span class="o">.</span><span class="n">GreeterClient</span><span class="p">)</span> <span class="o">*</span><span class="n">SomeService</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&amp;</span><span class="n">SomeService</span><span class="p">{</span><span class="n">gc</span><span class="o">:</span> <span class="n">gc</span><span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Here’s our real code:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">greeterAddr</span> <span class="o">=</span> <span class="n">flag</span><span class="o">.</span><span class="n">String</span><span class="p">(</span><span class="s">"greeterAddr"</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="s">"--greeterAddr=greeter:12345"</span><span class="p">)</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">flag</span><span class="o">.</span><span class="n">Parse</span><span class="p">()</span>
    <span class="n">conn</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">grpc</span><span class="o">.</span><span class="n">Dial</span><span class="p">(</span><span class="o">*</span><span class="n">GreeterAddr</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="c">// Handle err.</span>
    <span class="p">}</span>
    <span class="k">defer</span> <span class="n">conn</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>
    <span class="n">gc</span> <span class="o">:=</span> <span class="n">greeter</span><span class="o">.</span><span class="n">NewGreeterClient</span><span class="p">(</span><span class="n">conn</span><span class="p">)</span>
    <span class="n">serv</span> <span class="o">:=</span> <span class="n">someservice</span><span class="o">.</span><span class="n">NewSomeService</span><span class="p">(</span><span class="n">gc</span><span class="p">)</span>
    <span class="n">_</span> <span class="o">=</span> <span class="n">serv</span> <span class="c">// Use SomeService with real GreeterClient.</span>
<span class="p">}</span>
</code></pre></div></div>

<p>And, here’s our test version using a fake GreeterClient for testing:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">fakeGreeterClient</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">sayHelloFn</span> <span class="k">func</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="o">*</span><span class="n">HelloRequest</span><span class="p">,</span> <span class="o">...</span><span class="n">grpc</span><span class="o">.</span><span class="n">CallOption</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="n">HelloReply</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">gc</span> <span class="o">*</span><span class="n">fakeGreeterClient</span><span class="p">)</span> <span class="n">SayHello</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">in</span> <span class="o">*</span><span class="n">HelloRequest</span><span class="p">,</span> <span class="n">opts</span> <span class="o">...</span><span class="n">grpc</span><span class="o">.</span><span class="n">CallOption</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="n">greeter</span><span class="o">.</span><span class="n">HelloReply</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">gc</span><span class="o">.</span><span class="n">sayHelloFn</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">gc</span><span class="o">.</span><span class="n">sayHelloFn</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">in</span><span class="p">,</span> <span class="n">opts</span><span class="o">...</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">errors</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="s">"fakeGreeterClient was not set up with a response - must set gc.sayHelloFn"</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">TestSomeService</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">var</span> <span class="n">requests</span> <span class="p">[]</span><span class="o">*</span><span class="n">greeter</span><span class="o">.</span><span class="n">HelloReply</span>
    <span class="n">gc</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">fakeGreeterClient</span><span class="p">{}</span>
    <span class="c">// Set up the fake greeter to return a canned message.</span>
    <span class="n">gc</span><span class="o">.</span><span class="n">sayHelloFn</span> <span class="o">=</span> <span class="k">func</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">in</span> <span class="o">*</span><span class="n">HelloRequest</span><span class="p">,</span> <span class="n">opts</span> <span class="o">...</span><span class="n">grpc</span><span class="o">.</span><span class="n">CallOption</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="n">HelloReply</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">requests</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">requests</span><span class="p">,</span> <span class="n">in</span><span class="p">)</span> <span class="c">// Record requests.</span>
        <span class="k">return</span> <span class="o">&amp;</span><span class="n">greeter</span><span class="o">.</span><span class="n">HelloReply</span><span class="p">{</span><span class="n">Message</span><span class="o">:</span> <span class="s">"hello world"</span><span class="p">},</span> <span class="no">nil</span>
    <span class="p">}</span>
    <span class="n">serv</span> <span class="o">:=</span> <span class="n">NewSomeService</span><span class="p">(</span><span class="n">gc</span><span class="p">)</span>
    <span class="n">_</span> <span class="o">=</span> <span class="n">serv</span> <span class="c">// Test serv.</span>
    <span class="n">_</span> <span class="o">=</span> <span class="n">requests</span> <span class="c">// Assert on expected requests.</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Simple! And, of course, <code class="language-plaintext highlighter-rouge">fakeGreeterClient</code> can be more or less complicated:
perhaps it always returns the same thing (less complicated), or perhaps it tries
to mimic the behavior of the real <code class="language-plaintext highlighter-rouge">Greeter</code> (more complicated).</p>

<h1 id="stubbing">Stubbing</h1>

<p>Sometimes we aren’t able to use dependency injection, but we <em>can</em> choose which
connection we’re using. For example, this is the case with
<a href="https://pkg.go.dev/cloud.google.com/go/pubsub">cloud.google.com/go/pubsub</a>,
whose <a href="https://pkg.go.dev/cloud.google.com/go/pubsub#NewClient">NewClient</a> does
not allow passing the underlying <a href="https://pkg.go.dev/google.golang.org/api/pubsub/v1">google.golang.org/api/pubsub/v1 raw proto-generated client interface</a> but <a href="https://pkg.go.dev/google.golang.org/api/option#WithGRPCConn"><em>does</em> allow passing in a conn</a>.</p>

<p>Another example where passing a mock is not good enough, and you have to rely
on some connection, is integration tests! For integration tests, you’d want your
real binary to talk to a <code class="language-plaintext highlighter-rouge">Greeter</code> running locally, which you can
stub/set up/view interactions in the test itself. You’ll want this stub
<code class="language-plaintext highlighter-rouge">Greeter</code> to have some address like <code class="language-plaintext highlighter-rouge">localhost:12345</code> that you can pass to your
binary through a flag, like <code class="language-plaintext highlighter-rouge">--greeterAddr=localhost:12345</code>.</p>

<p>These are just two small examples, but this problem of needing stubbing
capabilities beyond a simple interface mock comes up enough that it justifies
its own section.</p>

<p>It turns out to be very similar to the above mocking strategy, with a few small
differences. Let’s dive in! We’ll use the second example - the integration test -
though the principles apply equally to any opaque gRPC client situation.</p>

<p>So, here’s our main from before, but we’re going to make it callable from our
test by sticking it in a non-main package:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">var</span> <span class="n">greeterAddr</span> <span class="o">=</span> <span class="n">flag</span><span class="o">.</span><span class="n">String</span><span class="p">(</span><span class="s">"greeterAddr"</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="s">"--greeterAddr=greeter:12345"</span><span class="p">)</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">flag</span><span class="o">.</span><span class="n">Parse</span><span class="p">()</span>
    <span class="n">myapp</span><span class="o">.</span><span class="n">Start</span><span class="p">(</span><span class="o">*</span><span class="n">greeterAddr</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">myapp</span>

<span class="c">// Start starts the app. It is like main, but tests can call it.</span>
<span class="k">func</span> <span class="n">Start</span><span class="p">(</span><span class="n">greeterAddr</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">conn</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">grpc</span><span class="o">.</span><span class="n">Dial</span><span class="p">(</span><span class="n">greeterAddr</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="c">// Handle err.</span>
    <span class="p">}</span>
    <span class="k">defer</span> <span class="n">conn</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>
    <span class="n">gc</span> <span class="o">:=</span> <span class="n">greeter</span><span class="o">.</span><span class="n">NewGreeterClient</span><span class="p">(</span><span class="n">conn</span><span class="p">)</span>
    <span class="n">serv</span> <span class="o">:=</span> <span class="n">someservice</span><span class="o">.</span><span class="n">NewSomeService</span><span class="p">(</span><span class="n">gc</span><span class="p">)</span>
    <span class="n">_</span> <span class="o">=</span> <span class="n">serv</span> <span class="c">// Use SomeService with real GreeterClient.</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This is one of <em>many</em> ways to start an integration. It allows us to run <code class="language-plaintext highlighter-rouge">main</code>
from our test, since <code class="language-plaintext highlighter-rouge">main</code> itself is unexported and not run-able from a test.</p>

<p>Sidenote: this method may seem hacky, but why? It’s just sticking your main into
another, callable method. It’s used by large projects <a href="https://github.com/etcd-io/etcd/blob/00e49d0c10bb931f596d801d7368b5e0ae539fbd/main.go">like etcd</a> if you need further assurance. 🙂</p>

<p>There are other ways to test main. For example, you might spin up the binary by
executing shell using os.Cmd and the like. That’s fine! The same principles
apply.</p>

<p>Anyways, we have a way to run <code class="language-plaintext highlighter-rouge">main</code> - how do we get <code class="language-plaintext highlighter-rouge">main</code> to talk to our stub?
We clearly can’t pass in a <code class="language-plaintext highlighter-rouge">GreeterClient</code> interface. So, instead, we’ll spin up
<code class="language-plaintext highlighter-rouge">Greeter</code> as an in-memory server, and pass the in-memory server address to
<code class="language-plaintext highlighter-rouge">Start</code>.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="s">"net"</span>
<span class="k">import</span> <span class="s">"google.golang.org/grpc"</span>

<span class="k">type</span> <span class="n">FakeGreeterClient</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">sayHelloFn</span> <span class="k">func</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="o">*</span><span class="n">HelloRequest</span><span class="p">,</span> <span class="o">...</span><span class="n">grpc</span><span class="o">.</span><span class="n">CallOption</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="n">HelloReply</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">gc</span> <span class="o">*</span><span class="n">FakeGreeterClient</span><span class="p">)</span> <span class="n">SayHello</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">in</span> <span class="o">*</span><span class="n">HelloRequest</span><span class="p">,</span> <span class="n">opts</span> <span class="o">...</span><span class="n">grpc</span><span class="o">.</span><span class="n">CallOption</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="n">greeter</span><span class="o">.</span><span class="n">HelloReply</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">gc</span><span class="o">.</span><span class="n">sayHelloFn</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">gc</span><span class="o">.</span><span class="n">sayHelloFn</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">in</span><span class="p">,</span> <span class="n">opts</span><span class="o">...</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">errors</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="s">"fakeGreeterClient was not set up with a response - must set gc.sayHelloFn"</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">TestIntegration</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">ctx</span> <span class="o">:=</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">()</span>

    <span class="c">// Start FakeGreeterClient in an in-memory process.</span>
    <span class="n">gc</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">FakeGreeterClient</span><span class="p">{}</span>
    <span class="n">l</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">net</span><span class="o">.</span><span class="n">Listen</span><span class="p">(</span><span class="s">"tcp"</span><span class="p">,</span> <span class="s">"localhost:0"</span><span class="p">)</span> <span class="c">// IIRC 0 == "first available port"</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">t</span><span class="o">.</span><span class="n">Fatal</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="n">gsrv</span> <span class="o">:=</span> <span class="n">grpc</span><span class="o">.</span><span class="n">NewServer</span><span class="p">(</span><span class="n">opts</span><span class="o">...</span><span class="p">)</span>
    <span class="n">greeter</span><span class="o">.</span><span class="n">RegisterGreeterServer</span><span class="p">(</span><span class="n">gsrv</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">gc</span><span class="p">)</span>
    <span class="n">fakeGreeterAddr</span> <span class="o">:=</span> <span class="n">l</span><span class="o">.</span><span class="n">Addr</span><span class="p">()</span><span class="o">.</span><span class="n">String</span><span class="p">()</span>
    <span class="k">go</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">gsrv</span><span class="o">.</span><span class="n">Serve</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">l</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
            <span class="nb">panic</span><span class="p">(</span><span class="n">err</span><span class="p">)</span> <span class="c">// We're in a goroutine - we can't t.Fatal/t.Error.</span>
        <span class="p">}</span>
    <span class="p">}()</span>

    <span class="n">myapp</span><span class="o">.</span><span class="n">Start</span><span class="p">(</span><span class="n">fakeGreeterAddr</span><span class="p">)</span>
    <span class="c">// Test your app, which is now hooked up to FakeGreeterClient!</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Ta-da! Very easy to start an in-memory gRPC fake.</p>

<h1 id="bonus-actually-testing-main-forreal">Bonus: actually testing main, forreal</h1>

<p>Ok, the above might be a bit arcane if you have the usual HTTP/gRPC API. You’re
now able to hook your app up to the fake in-memory server, but how do you
actually get your test to talk to <em>your</em> app?</p>

<p>However you want! But, we’ll walk through one example.</p>

<p>Imagine our app has some HTTP endpoints, and we want to send requests to them
from our test, and see that our app appropriately talks to <code class="language-plaintext highlighter-rouge">Greeter</code> when those
endpoints get hit. Well, in order to do that we need an address that our test
can send requests to. Let’s make that happen!</p>

<p>Let’s look at <code class="language-plaintext highlighter-rouge">main</code> and <code class="language-plaintext highlighter-rouge">Start</code> again:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">var</span> <span class="n">port</span> <span class="o">=</span> <span class="n">flag</span><span class="o">.</span><span class="n">Int</span><span class="p">(</span><span class="s">"port"</span><span class="p">,</span> <span class="m">8080</span><span class="p">,</span> <span class="s">"the port this app will run on, ex --port=8080"</span><span class="p">)</span>
<span class="k">var</span> <span class="n">greeterAddr</span> <span class="o">=</span> <span class="n">flag</span><span class="o">.</span><span class="n">String</span><span class="p">(</span><span class="s">"greeterAddr"</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="s">"--greeterAddr=greeter:12345"</span><span class="p">)</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">flag</span><span class="o">.</span><span class="n">Parse</span><span class="p">()</span>

    <span class="c">// When user kills this process, close the server.</span>
    <span class="k">defer</span> <span class="n">myapp</span><span class="o">.</span><span class="n">Start</span><span class="p">(</span><span class="o">*</span><span class="n">port</span><span class="p">,</span> <span class="o">*</span><span class="n">greeterAddr</span><span class="p">)</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>

    <span class="c">// Wait forever, until a user kills this process.</span>
    <span class="n">wg</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">sync</span><span class="o">.</span><span class="n">WaitGroup</span><span class="p">{}</span>
    <span class="n">wg</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>
    <span class="n">wg</span><span class="o">.</span><span class="n">Wait</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">myapp</span>

<span class="c">// Start starts the app. Call Shutdown on the returned Server when done.</span>
<span class="k">func</span> <span class="n">Start</span><span class="p">(</span><span class="n">port</span> <span class="kt">int</span><span class="p">,</span> <span class="n">greeterAddr</span> <span class="kt">string</span><span class="p">)</span> <span class="o">*</span><span class="n">http</span><span class="o">.</span><span class="n">Server</span> <span class="p">{</span>
    <span class="n">conn</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">grpc</span><span class="o">.</span><span class="n">Dial</span><span class="p">(</span><span class="n">greeterAddr</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="c">// Handle err.</span>
    <span class="p">}</span>
    <span class="k">defer</span> <span class="n">conn</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>
    <span class="n">gc</span> <span class="o">:=</span> <span class="n">greeter</span><span class="o">.</span><span class="n">NewGreeterClient</span><span class="p">(</span><span class="n">conn</span><span class="p">)</span>
    <span class="n">serv</span> <span class="o">:=</span> <span class="n">someservice</span><span class="o">.</span><span class="n">NewSomeService</span><span class="p">(</span><span class="n">gc</span><span class="p">)</span>
    <span class="n">_</span> <span class="o">=</span> <span class="n">serv</span> <span class="c">// Use SomeService with real GreeterClient.</span>

    <span class="n">http</span><span class="o">.</span><span class="n">HandleFunc</span><span class="p">(</span><span class="s">"/sayhello"</span><span class="p">,</span> <span class="k">func</span><span class="p">(</span><span class="n">w</span> <span class="n">http</span><span class="o">.</span><span class="n">ResponseWriter</span><span class="p">,</span> <span class="n">r</span> <span class="o">*</span><span class="n">http</span><span class="o">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">_</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">serv</span><span class="o">.</span><span class="n">SayHello</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">Background</span><span class="p">(),</span> <span class="o">&amp;</span><span class="n">greeter</span><span class="o">.</span><span class="n">HelloRequest</span><span class="p">{</span><span class="n">Name</span><span class="o">:</span> <span class="s">"world"</span><span class="p">});</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
            <span class="n">http</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">err</span><span class="o">.</span><span class="n">String</span><span class="p">(),</span> <span class="m">500</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">})</span>
    
    <span class="n">srv</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">http</span><span class="o">.</span><span class="n">Server</span><span class="p">{</span><span class="n">Addr</span><span class="o">:</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span><span class="s">":%d"</span><span class="p">,</span> <span class="n">port</span><span class="p">)}</span>
    <span class="k">go</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">srv</span><span class="o">.</span><span class="n">ListenAndServe</span><span class="p">();</span> <span class="n">err</span> <span class="o">!=</span> <span class="n">http</span><span class="o">.</span><span class="n">ErrServerClosed</span> <span class="p">{</span>
            <span class="n">log</span><span class="o">.</span><span class="n">Fatal</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}()</span>
    <span class="k">return</span> <span class="n">srv</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Mostly the same, except we now have an HTTP API. This is just an example - a
gRPC server would look similar.</p>

<p>Onto the integration test!</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="s">"net"</span>
<span class="k">import</span> <span class="s">"google.golang.org/grpc"</span>

<span class="k">type</span> <span class="n">FakeGreeterClient</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">sayHelloFn</span> <span class="k">func</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="o">*</span><span class="n">HelloRequest</span><span class="p">,</span> <span class="o">...</span><span class="n">grpc</span><span class="o">.</span><span class="n">CallOption</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="n">HelloReply</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">gc</span> <span class="o">*</span><span class="n">FakeGreeterClient</span><span class="p">)</span> <span class="n">SayHello</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">in</span> <span class="o">*</span><span class="n">HelloRequest</span><span class="p">,</span> <span class="n">opts</span> <span class="o">...</span><span class="n">grpc</span><span class="o">.</span><span class="n">CallOption</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="n">greeter</span><span class="o">.</span><span class="n">HelloReply</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">gc</span><span class="o">.</span><span class="n">sayHelloFn</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">gc</span><span class="o">.</span><span class="n">sayHelloFn</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">in</span><span class="p">,</span> <span class="n">opts</span><span class="o">...</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">errors</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="s">"fakeGreeterClient was not set up with a response - must set gc.sayHelloFn"</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">TestIntegration</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">ctx</span> <span class="o">:=</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">()</span>

    <span class="c">// Start FakeGreeterClient in an in-memory process.</span>
    <span class="n">gc</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">FakeGreeterClient</span><span class="p">{}</span>
    <span class="n">l</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">net</span><span class="o">.</span><span class="n">Listen</span><span class="p">(</span><span class="s">"tcp"</span><span class="p">,</span> <span class="s">"localhost:0"</span><span class="p">)</span> <span class="c">// IIRC 0 == "first available port"</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">t</span><span class="o">.</span><span class="n">Fatal</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="n">gsrv</span> <span class="o">:=</span> <span class="n">grpc</span><span class="o">.</span><span class="n">NewServer</span><span class="p">(</span><span class="n">opts</span><span class="o">...</span><span class="p">)</span>
    <span class="n">greeter</span><span class="o">.</span><span class="n">RegisterGreeterServer</span><span class="p">(</span><span class="n">gsrv</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">gc</span><span class="p">)</span>
    <span class="n">fakeGreeterAddr</span> <span class="o">:=</span> <span class="n">l</span><span class="o">.</span><span class="n">Addr</span><span class="p">()</span><span class="o">.</span><span class="n">String</span><span class="p">()</span>
    <span class="k">go</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">gsrv</span><span class="o">.</span><span class="n">Serve</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">l</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
            <span class="nb">panic</span><span class="p">(</span><span class="n">err</span><span class="p">)</span> <span class="c">// We're in a goroutine - we can't t.Fatal/t.Error.</span>
        <span class="p">}</span>
    <span class="p">}()</span>

    <span class="n">myappPort</span> <span class="o">:=</span> <span class="n">openPort</span><span class="p">()</span>
    <span class="n">myappAddr</span> <span class="o">:=</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span><span class="s">"localhost:%d"</span><span class="p">,</span> <span class="n">myappPort</span><span class="p">)</span>

    <span class="n">srv</span> <span class="o">:=</span> <span class="n">myapp</span><span class="o">.</span><span class="n">Start</span><span class="p">(</span><span class="n">myappPort</span><span class="p">,</span> <span class="n">fakeGreeterAddr</span><span class="p">)</span>
    <span class="k">defer</span> <span class="n">srv</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>
    
    <span class="c">// Test your app, which is now hooked up to FakeGreeterClient, by sending</span>
    <span class="c">// requests to myappAddr!</span>
<span class="p">}</span>

<span class="c">// openPort returns an open port.</span>
<span class="k">func</span> <span class="n">openPort</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Helper</span><span class="p">()</span>
    <span class="n">l</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">net</span><span class="o">.</span><span class="n">Listen</span><span class="p">(</span><span class="s">"tcp"</span><span class="p">,</span> <span class="s">":0"</span><span class="p">)</span>
    <span class="k">defer</span> <span class="n">l</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">t</span><span class="o">.</span><span class="n">Fatal</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="n">u</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">url</span><span class="o">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">l</span><span class="o">.</span><span class="n">Addr</span><span class="p">())</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">t</span><span class="o">.</span><span class="n">Fatal</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="n">u</span><span class="o">.</span><span class="n">Port</span><span class="p">()</span> <span class="o">==</span> <span class="s">""</span> <span class="p">{</span>
        <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"unable to parse a port from %s"</span><span class="p">,</span> <span class="n">l</span><span class="o">.</span><span class="n">Addr</span><span class="p">())</span>
    <span class="p">}</span>

    <span class="n">p</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">strconv</span><span class="o">.</span><span class="n">Atoi</span><span class="p">(</span><span class="n">u</span><span class="o">.</span><span class="n">Port</span><span class="p">())</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">t</span><span class="o">.</span><span class="n">Fatal</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">p</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="conclusion">Conclusion</h1>

<p>Stubbing and mocking gRPC servers in Go is very easy, doesn’t require any
libraries, and obviates the need for pre-provided fakes/mocks/emulators/etc.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Introduction]]></summary></entry><entry><title type="html">Keeping Your Modules Compatible</title><link href="http://localhost:4000/2020/07/07/keeping-your-modules-compatible.html" rel="alternate" type="text/html" title="Keeping Your Modules Compatible" /><published>2020-07-07T15:55:23-06:00</published><updated>2020-07-07T15:55:23-06:00</updated><id>http://localhost:4000/2020/07/07/keeping-your-modules-compatible</id><content type="html" xml:base="http://localhost:4000/2020/07/07/keeping-your-modules-compatible.html"><![CDATA[<p>Posted at <a href="https://blog.golang.org/module-compatibility">blog.golang.org/module-compatibility</a>.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Posted at blog.golang.org/module-compatibility.]]></summary></entry><entry><title type="html">Binary Search Tree Runtime Complexities</title><link href="http://localhost:4000/2019/11/23/binary-search-tree-runtime-complexity.html" rel="alternate" type="text/html" title="Binary Search Tree Runtime Complexities" /><published>2019-11-23T14:55:23-07:00</published><updated>2019-11-23T14:55:23-07:00</updated><id>http://localhost:4000/2019/11/23/binary-search-tree-runtime-complexity</id><content type="html" xml:base="http://localhost:4000/2019/11/23/binary-search-tree-runtime-complexity.html"><![CDATA[<h1 id="introduction">Introduction</h1>

<p>I’ve recently inundated myself with interview preparation. Along the way, I
thought a lot about how to intuit runtime complexities for various algorithms.
I thought that it might be nice to cement it all with an article - both for the
sake of others, as well as for my sake. This is the first article in that vein,
strictly dealing with binary search trees.</p>

<h1 id="terminology">Terminology</h1>

<p>Note: This article frequently uses the abbreviation BST to describe binary
search trees.</p>

<p>Here are properties of trees that this article deals with:</p>

<ul>
  <li>Number of nodes in a tree is typically denoted <code class="language-plaintext highlighter-rouge">n</code>.</li>
  <li>Height of a tree is typically denoted <code class="language-plaintext highlighter-rouge">k</code>.</li>
  <li><a href="https://en.wikipedia.org/wiki/Binary_tree">Complete</a>: every level except
possibly the last is completely filled.</li>
  <li><a href="https://en.wikipedia.org/wiki/Binary_tree">Full</a>: every node has 0 or 2
children. This is a subset of complete: every full tree is a complete tree.</li>
  <li><a href="https://en.wikipedia.org/wiki/Binary_tree">Balanced</a>: the height of the left
and right subtrees of every node differ by at most 1. Using the root node as
our focus, we can intuit that any balanced tree has fairly uniform height.</li>
  <li><a href="https://en.wikipedia.org/wiki/Binary_search_tree">Binary Search Tree</a>:
A tree in which each element to the left of a node is guaranteed to be less,
and to the right guaranteed to be greater. <em>BSTs may not be balanced</em>.</li>
  <li><a href="https://en.wikipedia.org/wiki/Red%E2%80%93black_tree">Red-black Tree</a>: A BST
that is balanced.</li>
  <li><a href="https://en.wikipedia.org/wiki/AVL_tree">AVL Tree</a>: A BST that is balanced (in
a different way than red-black trees).</li>
  <li><a href="https://en.wikipedia.org/wiki/Branching_factor">Branching factor</a>: The number
of children at each node.</li>
</ul>

<h1 id="searching-a-bst">Searching a BST</h1>

<p>Everyone knows that searching a binary search tree has runtime complexity
<code class="language-plaintext highlighter-rouge">O(logn)</code>, right? …right? Let’s take a second to tease apart some questions
from that assertion to see if we really understand what we mean when we say that:</p>

<ul>
  <li>
    <p>Q: What is the <a href="https://en.wikipedia.org/wiki/Logarithm">base</a> of the log?</p>

    <p>A: Typically when we talk about the base of a log, we’re talking about 2 or 10.  In the case of a BST case it’s 2 (we’ll dive into why that is shortly).</p>
  </li>
  <li>
    <p>Q: What does <code class="language-plaintext highlighter-rouge">n</code> represent?</p>

    <p>A: <code class="language-plaintext highlighter-rouge">n</code> <em>usually</em> means “number of elements”. In this case, <code class="language-plaintext highlighter-rouge">n</code> does mean that: or, another way to put that is “number of nodes in the tree”.</p>
  </li>
</ul>

<p>So, expanding <code class="language-plaintext highlighter-rouge">O(logn)</code>, we have: <code class="language-plaintext highlighter-rouge">O(log2(&lt;# nodes in tree&gt;))</code>.</p>

<p>Well, searching a BST is not strictly <code class="language-plaintext highlighter-rouge">O(log2(n))</code>: it depends on whether the
BST is balanced or not. An unbalanced BST may be <code class="language-plaintext highlighter-rouge">O(n)</code>. Let’s discover why by
exploring how the <code class="language-plaintext highlighter-rouge">log2</code> comes about.</p>

<h1 id="logarithms-and-exponents">Logarithms and exponents</h1>

<p>Let’s look at the following <em>full</em> binary tree:</p>

<p><img src="/assets/simple_complete.png" alt="Full Binary Tree" /></p>

<p>We can tell the following about this tree:</p>

<ul>
  <li>It has height <code class="language-plaintext highlighter-rouge">k=4</code>.</li>
  <li>It has nodes <code class="language-plaintext highlighter-rouge">n=15</code>.</li>
</ul>

<p>The number of nodes is the sum of the nodes at each level. The number of nodes
at each level are powers of 2. So, at <code class="language-plaintext highlighter-rouge">k=4</code> there are,</p>

\[\begin{align*}
n=1+2+4+8 &amp;&amp; \text{The sum of the nodes at each level.} \\
n=2^0+2^1+2^2+2^3 &amp;&amp; \text{Represented in powers of 2.} \\
n=\sum\limits_{j=0}^{k-1} 2^j &amp;&amp; \text{Represented as a summation.} \\
\end{align*}\]

<p>The branching factor here is 2 - each node has 2 children. What if each child
had 7 children, or 9, or 21? Let’s re-write the summation with a generic
branching factor <code class="language-plaintext highlighter-rouge">b</code>:</p>

\[\begin{align*}
n=\sum\limits_{j=0}^{k-1} 2^j &amp;&amp; \text{Branching factor of 2, as before.} \\
n=\sum\limits_{j=0}^{k-1} b^j &amp;&amp; \text{Branching factor of b.} \\
\end{align*}\]

<p>Sums are a bit of nuisance. Let’s convert this sum into a discrete formula:</p>

\[\begin{align*}
n=\sum\limits_{j=0}^{k-1} b^j \\
n=b^{k-1}+b^{k-2}+...+1 &amp;&amp; \text{Expanding the sum.} \\
n \cdot b=(b^{k-1}+b^{k-2}+...+1) \cdot b &amp;&amp; \text{Multiply by b.} \\
n \cdot b=b^k+b^{k-1}+...+b &amp;&amp; \text{Distribute the b into the sum.} \\
n \cdot b + 1=b^k+b^{k-1}+...+b+1 &amp;&amp; \text{Add 1 to each side.} \\
n \cdot b + 1=b^k + n &amp;&amp; \text{Note that we can use n for the right side.} \\
n \cdot b - n=b^k - 1 &amp;&amp; \text{Move n left; 1 right.} \\
n \cdot (b - 1)=b^k - 1 &amp;&amp; \text{Factor out n.} \\
n = \frac{b^k - 1}{b - 1} &amp;&amp; \text{Divide by n-1.} \\
\end{align*}\]

<p>Let’s test the formula by using <code class="language-plaintext highlighter-rouge">k=4</code> and <code class="language-plaintext highlighter-rouge">b=2</code> again, which we think should
equal <code class="language-plaintext highlighter-rouge">n=15</code>:</p>

\[\begin{align*}
n=\frac{2^4-1}{2-1} \\
n=\frac{16-1}{1} \\
n=15 \\
\end{align*}\]

<p>What if we knew the amount of nodes, but not the height? We can rework the
formula we just came up with to give us height using number of nodes,</p>

\[\begin{align*}
n=2^k-1 \\
n+1=2^k &amp;&amp; \text{Move 1 to the left.} \\
\log_2 {(n+1)}=\log_2 {(2^k)} &amp;&amp; \text{log2 both sides.} \\
\log_2 {(n+1)}=k \cdot \log_2 2 &amp;&amp; \text{Power rule.} \\
\log_2 {(n+1)}=k &amp;&amp; \text{Identity rule.} \\
k=\log_2 {(n+1)}
\end{align*}\]

<h1 id="back-to-binary-search-trees">Back to binary search trees</h1>

<p>How can we apply this knowledge? Consider again our original topic of a binary
search tree: one property of a BST is that a search operation requires no
backtracking. That is: the path to a node always going to go at most to a leaf
node - it never reaches a leaf and then has to backtrack and try a different
choice at a former node.</p>

<p>If the BST is unbalanced, the worst case time complexity to search for a value
is <code class="language-plaintext highlighter-rouge">O(n)</code>. We can easily show that this is the case with the following tree:</p>

<p><img src="/assets/left_bst.png" alt="Left BST" /></p>

<p>This BST is heavily weighted to the right. To search for the value 109, we’d have to
look at each of the <code class="language-plaintext highlighter-rouge">n=15</code> elements. That is: the worst case time complexity is
<code class="language-plaintext highlighter-rouge">O(n)</code>.</p>

<p>What if this BST were balanced, instead?</p>

<p><img src="/assets/balanced_bst.png" alt="Balanced BST" /></p>

<p>Now, to search for <em>any</em> value in the BST, the maximum depth we’d need to
traverse is <code class="language-plaintext highlighter-rouge">k</code>. We know that <code class="language-plaintext highlighter-rouge">k=log2(n)</code>, so we can say that the big-O runtime
complexity in terms of <code class="language-plaintext highlighter-rouge">n</code> is <code class="language-plaintext highlighter-rouge">O(log2(n))</code>.</p>

<h1 id="in-conclusion">In conclusion</h1>

<p>There are at most <code class="language-plaintext highlighter-rouge">n=(b^k - 1)/(b - 1)</code> nodes in any tree with height <code class="language-plaintext highlighter-rouge">k</code> and
branching factor <code class="language-plaintext highlighter-rouge">b</code>. In a binary tree, that simplifies to <code class="language-plaintext highlighter-rouge">n=2^k-1</code>, and can
be re-written in terms of height as <code class="language-plaintext highlighter-rouge">k=log2(n+1)</code>.</p>

<p>To conclude our original question: binary search trees don’t guarantee
<code class="language-plaintext highlighter-rouge">O(log2(n))</code> search: <em>balanced</em> BSTs do.</p>

<p>In a future article we’ll look at <a href="https://en.wikipedia.org/wiki/Heap_(data_structure)">Heap</a>
runtime complexity, and how memoization affects that. In some other future
article we’ll look at backtracking and permutation runtime complexities.</p>

<script type="text/javascript" async="" src="/assets/MathJax-2.7.9/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>

<script type="text/x-mathjax-config">
    MathJax.Hub.Config({
      extensions: [
        "MathMenu.js",
        "MathZoom.js",
        "AssistiveMML.js"
      ],
      jax: ["input/TeX", "output/CommonHTML"],
      TeX: {
        extensions: [
          "AMSmath.js",
          "AMSsymbols.js",
          "noErrors.js",
          "noUndefined.js",
        ]
      }
    });
  </script>]]></content><author><name></name></author><summary type="html"><![CDATA[Introduction]]></summary></entry></feed>